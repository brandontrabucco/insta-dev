from insta.utils import (
    BrowserStatus
)

from insta.configs.judge_config import (
    BrowserJudgment
)

import re
import json


JUDGE_PATTERN = re.compile(
    r"```json\n(?P<json>.*)\n```",
    re.DOTALL
)

SYSTEM_PROMPT = """You are helping me evaluate a language model agent that interacts with and navigates live webpages."""

USER_PROMPT_TEMPLATE = """Determine if the agent has completed the task:

{instruction}

Here is the agent's trajectory:

{summary}"""


class BaseJudgePrompt(object):
    """Implements a parser for converting text generated by an LLM into a
    judgment of whether a web browsing task has been successfully completed,
    returns a BrowserJudgment instance parsed from the response.

    Attributes:

    system_prompt: str
        Depending on the judgment representation, this system prompt
        instructs the LLM on how to generate judgments in the corresponding format,
        such as JSON-based judgments, python code, etc.

    user_prompt_template: str
        A template string that is used to generate a user prompt for the LLM,
        and had format keys for `observation` and `instruction`.

    """

    system_prompt = SYSTEM_PROMPT
    user_prompt_template = USER_PROMPT_TEMPLATE

    def parse_judgment(self, response: str) -> BrowserJudgment | BrowserStatus:
        """Parse a judgment string produced by an LLM, and return a
        BrowserJudgment object that contains a sequence of function calls
        to perform in a web browsing session.

        Arguments:

        response: str
            The response from an LLM that contains a judgment in a code block,
            which will be parsed into a BrowserJudgment object.
        
        Returns:

        BrowserJudgment | PlaywrightStatus
            The parser judgment object that contains a dictionary of parsed 
            judgment values, and the text values were parsed from.
        
        """
        
        match = JUDGE_PATTERN.search(response)

        has_required_field = (
            match is not None and 
            "json" in match.groupdict()
        )

        if not has_required_field:
    
            raise ValueError(
                "Failed to parse judgment"
            )

        matched_response = match.group("json")

        response_dict = json.loads(
            matched_response
        )
        
        has_required_keys = (
            "success" in response_dict and
            "efficiency" in response_dict and
            "self_correction" in response_dict
        )

        if not has_required_keys:
    
            raise ValueError(
                "Failed to parse judgment"
            )
        
        success = response_dict["success"]
        efficiency = response_dict["efficiency"]
        self_correction = response_dict["self_correction"]
        
        keys_right_type = (
            (isinstance(success, float) or isinstance(success, int)) and
            (isinstance(efficiency, float) or isinstance(efficiency, int)) and
            (isinstance(self_correction, float) or isinstance(self_correction, int))
        )

        if not keys_right_type:
    
            raise ValueError(
                "Failed to parse judgment"
            )
        
        browser_judgment = BrowserJudgment(
            success = float(success),
            efficiency = float(efficiency),
            self_correction = float(self_correction),
            response = response,
            matched_response = matched_response
        )

        return browser_judgment
